from enum import Enum
from typing import Optional
from custom_py.src.utils import json_parser
{{#each typeFormatArray}}
{{~#if (isAbsent ../onceMap 'import datetime' (equalAny this 'date,date-time'))}}
from datetime import datetime
{{~else}}{{~#if (isAbsent ../onceMap 'import decimal' (equalAny this 'decimal'))}}
from decimal import Decimal
{{/if~}}{{/if~}}
{{/each}}

{{#each enumFieldArray}}{{#if (isAbsent onceMap name 1)}}
class {{name}}(Enum):
    {{#each values}}
    {{this}}{{#if (stringInArray this sdk.keywords)}}_{{/if}} = {{#if (equalAny valueType ',string')}}"{{this}}"{{else}}{{this}}{{/if}}
    {{/each}}
    {{/if~}}
{{/each}}

{{#each objectFieldArray}}{{#if (isAbsent onceMap (joinString '_' documentPath) 1)}}
{{#if description}}"""{{description}}"""
{{/if}}class {{joinString '_' documentPath~}}
    {{~#if additional}}({{#equal typeName 'array'}}list[{{else}}dict[str, {{/equal~}}
    {{#with additional}}{{~> field_type this=this}}]){{/with}}{{/if}}:
    def __init__(self{{#unless fields}}{{#if additional}}, *args, **kwargs{{/if}}){{else}},
                {{#each fields}} {{name}}{{#if (stringInArray name sdk.keywords)}}_{{/if~}}
                : {{#unless required}}Optional[{{/unless}}{{#if isArray}}list[{{/if}}
                {{~> field_type this=this~}}
                {{#if isArray}}]{{/if~}}{{#unless required}}]{{/unless}} = None{{#unless @last}},{{/unless}}
                {{/each}}){{/unless}}:
        {{#if additional~}}
        {{#with additional.typeRefObject}}
        args = tuple([{{#equal ../typeName 'array'}}[{{else}}{k: {{/equal~}}
            json_parser.parse_dict_to_class(v, {{joinString '_' documentPath}}) for {{#unless (equalAny ../typeName 'array')}}k, {{/unless}}v in arg
            {{~#equal ../typeName 'array'}}]{{else~}}
            }{{/equal}} for arg in args])
        {{/with}}
        super().__init__(*args, **kwargs)
        {{/if}}
        {{#unless fields}}{{#unless additional}}pass{{/unless}}
        {{~else}}{{#each fields}}{{#if description}}"""{{description}}"""
        {{/if}}self.{{name}}{{#if (stringInArray name sdk.keywords)}}_{{/if}} = {{#if typeRefObject}}json_parser.parse_{{#if isArray}}list{{else}}dict{{/if}}_to_class({{/if~}}
        {{name}}{{#if (stringInArray name sdk.keywords)}}_{{/if}}
        {{~#if typeRefObject}}, {{joinString '_' typeRefObject.documentPath~}}){{/if}}
        {{/each}}{{/unless}}
    def to_json(self) -> {{#equal typeName 'array'}}list{{else}}dict{{/equal~}}:
        _json = self{{#unless additional}}.__dict__.copy(){{/unless}}
        {{#each fields}}{{#if (isAnyTrue (isNotEmpty typeRefObject) (isNotEmpty typeRefEnum))~}}
        _json['{{name}}{{#if (stringInArray name sdk.keywords)}}_{{/if}}'] =
        {{~#if isArray}} [x.{{#if typeRefEnum}}value{{else}}to_json(){{/if}} for x in self.{{name}}{{#if (stringInArray name sdk.keywords)}}_{{/if}}]
        {{~else}} self.{{name}}{{#if (stringInArray name sdk.keywords)}}_{{/if}}.{{#if typeRefEnum}}value{{else}}to_json(){{/if}}
        {{~/if}} if self.{{name}}{{#if (stringInArray name sdk.keywords)}}_{{/if}} else None
        {{/if}}{{/each~}}
        {{#if additional}}{{#with additional.typeRefObject}}
        _json = {{#equal ../typeName 'array'~}}
            [json_parser.recover_dict_keys(x.to_json(), {{joinString '_' documentPath~}}) for x in _json]
            {{else~}}
            {k: json_parser.recover_dict_keys(v.to_json(), {{joinString '_' documentPath~}}) for k, v in _json.items()}
            {{~/equal}}
        {{~/with}}
        {{~else}}json_parser.recover_dict_keys(_json, {{joinString '_' documentPath}})
        {{~/if}}

        return _json
    {{/if}}
{{/each}}

def register_init_parameter_renames():
{{~#each objectFieldArray}}{{#with (filterFieldsByKeywords fields sdk.keywords)}}
    json_parser.init_parameter_renames[{{joinString '_' ../documentPath}}] = [{{#each this}}json_parser.init_parameter_rename('{{name}}', '{{name}}_'){{#unless @last}}, {{/unless}}{{/each}}]
{{~/with}}{{/each}}
    return
